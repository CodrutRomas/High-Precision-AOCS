# AOCS Real-time GUI Application - Simplified Build
cmake_minimum_required(VERSION 3.16)

project(AOCS_GUI_Demo
    VERSION 1.0.0
    DESCRIPTION "AOCS Real-time Visualization GUI Demo"
    LANGUAGES CXX
)

# Set C++ standard
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# Find required packages
find_package(OpenGL REQUIRED)

# Use local dependencies
set(GLFW_DIR "${CMAKE_CURRENT_SOURCE_DIR}/dependencies/glfw")
set(GLEW_DIR "${CMAKE_CURRENT_SOURCE_DIR}/dependencies/glew")

# GLFW setup
if(EXISTS "${GLFW_DIR}")
    set(GLFW_INCLUDE_DIRS "${GLFW_DIR}/include")
    
    # Find appropriate library directory
    if(EXISTS "${GLFW_DIR}/lib-vc2022")
        set(GLFW_LIB_DIR "${GLFW_DIR}/lib-vc2022")
    elseif(EXISTS "${GLFW_DIR}/lib-vc2019")
        set(GLFW_LIB_DIR "${GLFW_DIR}/lib-vc2019")
    elseif(EXISTS "${GLFW_DIR}/lib-vc2017")
        set(GLFW_LIB_DIR "${GLFW_DIR}/lib-vc2017")
    else()
        set(GLFW_LIB_DIR "${GLFW_DIR}/lib-vc2015")
    endif()
    
    find_library(GLFW_LIBRARIES
        NAMES glfw3 glfw
        PATHS "${GLFW_LIB_DIR}"
        NO_DEFAULT_PATH
    )
    
    set(GLFW_FOUND TRUE)
else()
    message(FATAL_ERROR "GLFW not found in dependencies directory!")
endif()

# GLEW setup
if(EXISTS "${GLEW_DIR}")
    set(GLEW_INCLUDE_DIRS "${GLEW_DIR}/include")
    
    find_library(GLEW_LIBRARIES
        NAMES glew32 GLEW
        PATHS "${GLEW_DIR}/lib/Release/x64"
        NO_DEFAULT_PATH
    )
    
    set(GLEW_FOUND TRUE)
else()
    message(FATAL_ERROR "GLEW not found in dependencies directory!")
endif()

# ImGui sources
set(IMGUI_DIR "${CMAKE_CURRENT_SOURCE_DIR}/imgui")
set(IMGUI_SOURCES
    ${IMGUI_DIR}/imgui.cpp
    ${IMGUI_DIR}/imgui_demo.cpp
    ${IMGUI_DIR}/imgui_draw.cpp
    ${IMGUI_DIR}/imgui_tables.cpp
    ${IMGUI_DIR}/imgui_widgets.cpp
    ${IMGUI_DIR}/backends/imgui_impl_glfw.cpp
    ${IMGUI_DIR}/backends/imgui_impl_opengl3.cpp
)

# ImPlot sources
set(IMPLOT_DIR "${CMAKE_CURRENT_SOURCE_DIR}/implot")
set(IMPLOT_SOURCES
    ${IMPLOT_DIR}/implot.cpp
    ${IMPLOT_DIR}/implot_items.cpp
)

# Create a simple demo executable
add_executable(aocs_gui_demo
    aocs_gui_demo.cpp
    ${IMGUI_SOURCES}
    ${IMPLOT_SOURCES}
)

# Include directories
target_include_directories(aocs_gui_demo PRIVATE
    ${CMAKE_CURRENT_SOURCE_DIR}
    ${OPENGL_INCLUDE_DIRS}
    ${GLFW_INCLUDE_DIRS}
    ${GLEW_INCLUDE_DIRS}
    ${IMGUI_DIR}
    ${IMGUI_DIR}/backends
    ${IMPLOT_DIR}
)

# Link libraries
target_link_libraries(aocs_gui_demo PRIVATE
    ${OPENGL_LIBRARIES}
    ${GLFW_LIBRARIES}
    ${GLEW_LIBRARIES}
)

# Platform-specific settings
if(WIN32)
    target_link_libraries(aocs_gui_demo PRIVATE
        opengl32
        gdi32
        user32
        kernel32
    )
endif()

# Compiler-specific options
if(MSVC)
    target_compile_options(aocs_gui_demo PRIVATE /W3)
    target_compile_definitions(aocs_gui_demo PRIVATE
        _CRT_SECURE_NO_WARNINGS
        IMGUI_IMPL_OPENGL_ES2
    )
else()
    target_compile_options(aocs_gui_demo PRIVATE -Wall -Wextra)
endif()

# Set target properties
set_target_properties(aocs_gui_demo PROPERTIES
    OUTPUT_NAME "aocs_gui_demo"
    DEBUG_POSTFIX "_debug"
)

message(STATUS "AOCS GUI Demo configured successfully")
message(STATUS "Build type: ${CMAKE_BUILD_TYPE}")